/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
  Content Based routing general rules
  When a message arrives, CBR rules determine its destination (the session(s) where it needs to be processed),
  while processing rules determine the commands to be executed to deliver the contents to that session.
  When the two steps have been completed, the commands are delivered.
*/

package org.drools.mas;
import org.drools.mas.core.SessionManager;
import org.drools.mas.body.content.ActionHolder;
import org.drools.mas.body.content.Action;
import org.drools.mas.util.LoggerHelper;

import org.drools.mas.util.helper.SessionLocator;

import org.drools.grid.Grid;
import org.drools.grid.api.impl.ResourceDescriptorImpl;
import org.drools.grid.api.ResourceDescriptor;

import java.net.URL;
import org.drools.builder.ResourceType;

global Grid grid;

declare ResourceAdditionRequest
    URL: URL
    type: ResourceType
end

query queryIf( Object $o )
    $queryIf : Object( this == $o )
end



//rule "Delayed action"
//salience 9999
//when
//    $holder : ActionHolder( $id : refId, $act : action, $drl : condition )
//    SessionLocator( $nodeId: nodeId, $sessionId : sessionId, mind == false )
//then
//    ResourceDescriptorImpl rd = new ResourceDescriptorImpl( );
//        rd.setId( "FIPA_RWH_" + $id );
//        rd.setLoaded( true );
//    insert( rd );
//
//    LoggerHelper.error(" >>> Adding Rule By Template: "+"requestWhen.drlt" + "THE FOLLOWING LOGIC IS NOT WORKING CHECK!!!!  " + $nodeId + " >>> " + $sessionId );
//    SessionManager.addRuleByTemplate( grid, $nodeId, $sessionId, rd.getId(), "requestWhen.drlt", $holder );
//end

//rule "CleanUp Request When"
//when
//    $rd : ResourceDescriptor( $id : id )
//    not   ActionHolder( refId == $id.replace( "FIPA_RWH_", "" ) )
//    SessionLocator( $nodeId: nodeId, $sessionId : sessionId, mind == false )
//then
//    retract( $rd );
//
//    LoggerHelper.error(" >>> Unload Request rule " + "THE FOLLOWING LOGIC IS NOT WORKING CHECK!!!!" );
//    // remove rule....
//end


rule "Add Resource"
when
    $rar: ResourceAdditionRequest($url: URL, $type: type)
    SessionLocator( $nodeId: nodeId, $sessionId : sessionId, mind == false )
then
    LoggerHelper.error("Loading resource '" + $rar.getURL() +"' in session '"+$sessionId+"' of grid '"+grid+"'");
    
    ResourceDescriptorImpl rd = new ResourceDescriptorImpl( );
    rd.setResourceURL($url);
    rd.setType($type);

    //SessionManager.addResource(grid, $nodeId, $sessionId, rd);
    
    SessionManager.addResource(drools.getWorkingMemory(), rd);
    

    retract($rar);
end
