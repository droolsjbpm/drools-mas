/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
    Domain-Specific, concrete routing rules.
    Can exploit JsonPath / XPath queries on a message's
    encoded form for type-unsafe checks, in addition to
    standard pattern matching on a message content
    represented in object form

*/


package org.drools.mas; //this is completly wrong.. we need to use the same package as core to use the mapSession query


import org.drools.mas.ACLMessage;
import org.drools.mas.util.ACLMessageFactory;
import org.drools.mas.body.acts.*;
import org.drools.mas.body.content.Info;
import org.drools.mas.util.InspectMessageHelper;
import mock.MockFact;
import org.drools.mas.Act;
import org.drools.mas.Destination;
import org.drools.mas.SessionMapping;
import org.drools.mas.Encodings;
import org.drools.mas.util.LoggerHelper;




rule "Mapping"
when
then
    insert( new SessionMapping("patient1","session1") );
    insert( new SessionMapping("patient2","session2") );
end

// A 1-1 relation is defined between patient IDs and slave sessions

rule "Route_Encoded"
salience -1
when
    $msg : ACLMessage( $msgId : id, $b : body, encoding == Encodings.JSON  )
    $patientId : String( this != null ) from InspectMessageHelper.inspect($msg,"$..name[0]")
//    mapSession( $patientId, $sessionId ; )
then
    LoggerHelper.debug(" ### Example CBR: Routing message J " + $msgId  );
//    insertLogical( new Destination( $msgId, $sessionId ) );
    insert( new MappingLookup( $msgId, $patientId ) );
end

rule "Route_Encoded_X"
salience -1
when
    $msg : ACLMessage( $msgId : id, $b : body, encoding == Encodings.XML )
    $patientId : String( this != null ) from InspectMessageHelper.inspect($msg,"//name[1]") 
//    mapSession( $patientId , $sessionId ; )
then
    LoggerHelper.debug(" ### Example CBR: Routing message  X " + $msgId  );
//    insertLogical( new Destination( $msgId, $sessionId ) );
    insert( new MappingLookup( $msgId, $patientId ) );
end



rule "Patients of age go to session #2"
dialect "mvel"
salience -1
when
    $msg : ACLMessage( $msgId : id, $body : body, performative == Act.INFORM  )
    Inform( $prop : proposition ) from $body
    MockFact( age > 18 ) from $prop.getData()
then
    LoggerHelper.debug(" ### Example CBR: Routing message " + $msgId + " to session2 ");
    insertLogical( new Destination($msgId, "session2") );
end


rule "Query is known to be in session #1"
dialect "mvel"
salience -1
when
    $msg : ACLMessage( $msgId : id, $b : body, encoding == Encodings.JSON )
    String( this == "ageOfPatient" ) from InspectMessageHelper.inspect($msg,"$..queryName[0]")
then
    LoggerHelper.debug(" ### Example CBR: Routing message " + $msgId + " to session1 ");
    insertLogical( new Destination($msgId, "session1") );
end



rule "Query is known to be in session #1_X"
dialect "mvel"
salience -1
when
    $msg : ACLMessage( $msgId : id, $b : body, encoding == Encodings.XML )
    String( this == "ageOfPatient" ) from InspectMessageHelper.inspect($msg,"//queryName")
then
    LoggerHelper.debug(" ### Example CBR: Routing message " + $msgId + " to session1 ");
    insertLogical( new Destination($msgId, "session1") );
end


rule "Another Query is known to be in session #1_X"
dialect "mvel"
salience -1
when
    $msg : ACLMessage( $msgId : id, $b : body, encoding == Encodings.XML )
    String( this == "queryExceptional" ) from InspectMessageHelper.inspect($msg,"//queryName")
then
    LoggerHelper.debug(" ### Example CBR: Routing message " + $msgId + " to session1 ");
    insertLogical( new Destination($msgId, "session1") );
end








rule "Action handled in session #2"
dialect "mvel"
salience -1
when
    $msg : ACLMessage( $msgId : id, $b : body, encoding == Encodings.JSON)
    String( this == "squareRoot" || this == "randomSum" || this == "errorSquareRoot" ) from InspectMessageHelper.inspect($msg,"$..actionName[0]")
then
    LoggerHelper.debug(" ### Example CBR: Routing message " + $msgId + " to session2 ");
    insertLogical( new Destination($msgId, "session2") );
end



rule "Action handled in session #2_X"
dialect "mvel"
salience -1
when
    $msg : ACLMessage( $msgId : id, $b : body, encoding == Encodings.XML)
    String( this == "squareRoot" || this == "randomSum" || this == "errorSquareRoot" ) from InspectMessageHelper.inspect($msg,"//actionName")
then
    LoggerHelper.debug(" ### Example CBR: Routing message " + $msgId + " to session2 ");
    insertLogical( new Destination($msgId, "session2") );
end


rule "Special String"
dialect "mvel"
salience -1
when
    $msg : ACLMessage( $msgId : id, $body : body, performative == Act.INFORM  )
    Inform( $prop : proposition ) from $body
    String( this == "actionTrigger" || this == "actionTrigger2" ) from $prop.getData()
then
    LoggerHelper.debug(" ### Example CBR: Routing message " + $msgId + " to session2 ");
    insertLogical( new Destination($msgId, "session2") );
end

